{
  "name" : "Thesis ETL",
  "jobMode" : "VISUAL",
  "description" : "",
  "role" : "arn:aws:iam::571600865079:role/service-role/AWSGlueServiceRole",
  "executionProperty" : {
    "maxConcurrentRuns" : 1
  },
  "command" : {
    "name" : "glueetl",
    "scriptLocation" : "s3://aws-glue-assets-571600865079-ap-southeast-1/scripts/Thesis ETL.py",
    "pythonVersion" : "3"
  },
  "defaultArguments" : {
    "--enable-metrics" : "true",
    "--enable-spark-ui" : "true",
    "--spark-event-logs-path" : "s3://aws-glue-assets-571600865079-ap-southeast-1/sparkHistoryLogs/",
    "--enable-job-insights" : "true",
    "--enable-observability-metrics" : "true",
    "--enable-glue-datacatalog" : "true",
    "--enable-continuous-cloudwatch-log" : "true",
    "--job-bookmark-option" : "job-bookmark-disable",
    "--job-language" : "python",
    "--TempDir" : "s3://aws-glue-assets-571600865079-ap-southeast-1/temporary/"
  },
  "maxRetries" : 0,
  "allocatedCapacity" : 2,
  "timeout" : 480,
  "maxCapacity" : 2.0,
  "glueVersion" : "5.0",
  "numberOfWorkers" : 2,
  "workerType" : "G.1X",
  "executionClass" : "STANDARD",
  "codeGenConfigurationNodes" : "{\"node-1744298165966\":{\"ApplyMapping\":{\"Inputs\":[\"node-1744298077240\"],\"Mapping\":[{\"Dropped\":true,\"FromPath\":[\"TransactionID\"],\"FromType\":\"string\",\"ToKey\":\"TransactionID\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustomerID\"],\"FromType\":\"string\",\"ToKey\":\"CustomerID\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustomerDOB\"],\"FromType\":\"timestamp\",\"ToKey\":\"CustomerDOB\",\"ToType\":\"timestamp\"},{\"Dropped\":true,\"FromPath\":[\"CustGender\"],\"FromType\":\"string\",\"ToKey\":\"CustGender\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustLocation\"],\"FromType\":\"string\",\"ToKey\":\"CustLocation\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustAccountBalance\"],\"FromType\":\"string\",\"ToKey\":\"CustAccountBalance\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"TransactionDate\"],\"FromType\":\"timestamp\",\"ToKey\":\"TransactionDate\",\"ToType\":\"timestamp\"},{\"Dropped\":false,\"FromPath\":[\"TransactionTime\"],\"FromType\":\"string\",\"ToKey\":\"TransactionTime\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"TransactionAmount (INR)\"],\"FromType\":\"string\",\"ToKey\":\"TransactionAmount (INR)\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"Age\"],\"FromType\":\"bigint\",\"ToKey\":\"Age\",\"ToType\":\"long\"}],\"Name\":\"Time Dimention\"}},\"node-1744123229330\":{\"CustomCode\":{\"ClassName\":\"CleaningTransform\",\"Code\":\"import pandas as pd\\nfrom awsglue.dynamicframe import DynamicFrame, DynamicFrameCollection\\nfrom pyspark.sql.functions import year\\nfrom pyspark.sql.utils import AnalysisException\\n\\n# Extract first DynamicFrame\\ndyf = dfc.select(list(dfc.keys())[0])\\n\\n# Convert to Spark DataFrame\\ndf_spark = dyf.toDF()\\n\\n# Convert to Pandas (⚠️ only for small datasets)\\ndf_pd = df_spark.toPandas()\\n\\n# ➕ Parse dates using pandas\\ndf_pd['CustomerDOB'] = pd.to_datetime(df_pd['CustomerDOB'], dayfirst=True, errors='coerce')\\ndf_pd['TransactionDate'] = pd.to_datetime(df_pd['TransactionDate'], dayfirst=True, errors='coerce')\\n\\n# Drop rows where dates are missing\\ndf_pd.dropna(subset=['CustomerDOB', 'TransactionDate'], inplace=True)\\n\\n# ⏳ Remove time part (safely)\\ndf_pd['CustomerDOB'] = df_pd['CustomerDOB'].apply(lambda x: x.date() if pd.notnull(x) else x)\\ndf_pd['TransactionDate'] = df_pd['TransactionDate'].apply(lambda x: x.date() if pd.notnull(x) else x)\\n\\n# Convert back to datetime so we can calculate age\\ndf_pd['CustomerDOB'] = pd.to_datetime(df_pd['CustomerDOB'])\\ndf_pd['TransactionDate'] = pd.to_datetime(df_pd['TransactionDate'])\\n\\n# Fix DOBs with 2000+ error\\ndf_pd['CustomerDOB'] = df_pd.apply(\\n    lambda row: row['CustomerDOB'] - pd.DateOffset(years=100) if row['CustomerDOB'] > row['TransactionDate'] else row['CustomerDOB'],\\n    axis=1\\n)\\n\\n# Calculate age\\ndf_pd['Age'] = df_pd['TransactionDate'].dt.year - df_pd['CustomerDOB'].dt.year\\n\\n# Filter age between 18 and 100\\ndf_pd = df_pd[(df_pd['Age'] >= 18) & (df_pd['Age'] <= 100)]\\n\\n# Drop duplicates and nulls\\ndf_pd.drop_duplicates(inplace=True)\\ndf_pd.dropna(inplace=True)\\n\\n# Convert back to Spark DataFrame\\nif df_pd.empty:\\n    df_result = glueContext.spark_session.createDataFrame([], df_spark.schema)\\nelse:\\n    df_result = glueContext.spark_session.createDataFrame(df_pd)\\n\\n# Convert to DynamicFrame\\ndyf_cleaned = DynamicFrame.fromDF(df_result, glueContext, \\\"dyf_cleaned\\\")\\n\\nreturn DynamicFrameCollection({\\\"cleaned_data\\\": dyf_cleaned}, glueContext)\\n\\n\",\"Inputs\":[\"node-1744123198576\"],\"Name\":\"Cleaning Transform\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"TransactionID\",\"Type\":\"string\"},{\"Name\":\"CustomerID\",\"Type\":\"string\"},{\"Name\":\"CustomerDOB\",\"Type\":\"timestamp\"},{\"Name\":\"CustGender\",\"Type\":\"string\"},{\"Name\":\"CustLocation\",\"Type\":\"string\"},{\"Name\":\"CustAccountBalance\",\"Type\":\"string\"},{\"Name\":\"TransactionDate\",\"Type\":\"timestamp\"},{\"Name\":\"TransactionTime\",\"Type\":\"string\"},{\"Name\":\"TransactionAmount (INR)\",\"Type\":\"string\"},{\"Name\":\"Age\",\"Type\":\"bigint\"}]}]}},\"node-1744294167190\":{\"CustomCode\":{\"ClassName\":\"DimensionTransform\",\"Code\":\"import pandas as pd\\nfrom awsglue.dynamicframe import DynamicFrame, DynamicFrameCollection\\nfrom pyspark.sql.functions import col, year, month, quarter, date_format\\nfrom pyspark.sql.types import IntegerType\\nfrom pyspark.sql.utils import AnalysisException\\n\\n# ✅ Extract the actual DynamicFrame directly\\nif isinstance(dfc, DynamicFrameCollection):\\n    keys = list(dfc.keys())\\n    print(f\\\"[DimensionTransform] Keys: {keys}\\\")\\n    if not keys:\\n        raise ValueError(\\\"DynamicFrameCollection is empty.\\\")\\n    dyf = dfc.select(keys[0])[\\\"cleaned_data\\\"]  # 🔥 fix is here\\nelif isinstance(dfc, DynamicFrame):\\n    dyf = dfc\\nelse:\\n    raise TypeError(\\\"Expected DynamicFrame or DynamicFrameCollection, got: {}\\\".format(type(dfc)))\\n\\n# ✅ Convert to Spark DataFrame\\ndf = dyf.toDF()\\nreturn DynamicFrameCollection({\\n    \\\"DimCustomer\\\": DynamicFrame.fromDF(df, glueContext)\\n}, glueContext)\\n\\n\\n# # ✅ 1. Customer Dimension\\n# customer_dim = df.select(\\n#     \\\"CustomerID\\\", \\\"CustomerDOB\\\", \\\"CustGender\\\", \\\"CustLocation\\\", \\\"CustAccountBalance\\\", \\\"Age\\\"\\n# ).dropDuplicates()\\n# dyf_customer = DynamicFrame.fromDF(customer_dim, glueContext, \\\"dyf_customer\\\")\\n\\n# # ✅ 2. Transaction Dimension\\n# transaction_dim = df.select(\\n#     \\\"TransactionID\\\",\\n#     \\\"TransactionDate\\\",\\n#     \\\"TransactionTime\\\",\\n#     col(\\\"TransactionAmount (INR)\\\").alias(\\\"TransactionAmount\\\"),\\n#     \\\"CustomerID\\\"\\n# ).dropDuplicates()\\n# dyf_transaction = DynamicFrame.fromDF(transaction_dim, glueContext, \\\"dyf_transaction\\\")\\n\\n# # ✅ 3. Time Dimension\\n# time_df = df.select(\\\"TransactionDate\\\").dropDuplicates().withColumnRenamed(\\\"TransactionDate\\\", \\\"Date\\\")\\n# time_df = time_df.withColumn(\\\"Year\\\", year(\\\"Date\\\")) \\\\\\n#                  .withColumn(\\\"Month\\\", month(\\\"Date\\\")) \\\\\\n#                  .withColumn(\\\"MonthName\\\", date_format(\\\"Date\\\", \\\"MMMM\\\")) \\\\\\n#                  .withColumn(\\\"Quarter\\\", quarter(\\\"Date\\\")) \\\\\\n#                  .withColumn(\\\"DateID\\\", date_format(\\\"Date\\\", \\\"yyyyMMdd\\\").cast(IntegerType()))\\n# dyf_time = DynamicFrame.fromDF(time_df, glueContext, \\\"dyf_time\\\")\\n\\n# return DynamicFrameCollection({\\n#     \\\"DimCustomer\\\": dyf_customer,\\n#     \\\"DimTransaction\\\": dyf_transaction,\\n#     \\\"DimTime\\\": dyf_time\\n# }, glueContext)\",\"Inputs\":[\"node-1744123229330\"],\"Name\":\"create dimensions\"}},\"node-1744298164185\":{\"ApplyMapping\":{\"Inputs\":[\"node-1744298077240\"],\"Mapping\":[{\"Dropped\":false,\"FromPath\":[\"TransactionID\"],\"FromType\":\"string\",\"ToKey\":\"TransactionID\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"CustomerID\"],\"FromType\":\"string\",\"ToKey\":\"CustomerID\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustomerDOB\"],\"FromType\":\"timestamp\",\"ToKey\":\"CustomerDOB\",\"ToType\":\"timestamp\"},{\"Dropped\":true,\"FromPath\":[\"CustGender\"],\"FromType\":\"string\",\"ToKey\":\"CustGender\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustLocation\"],\"FromType\":\"string\",\"ToKey\":\"CustLocation\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"CustAccountBalance\"],\"FromType\":\"string\",\"ToKey\":\"CustAccountBalance\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"TransactionDate\"],\"FromType\":\"timestamp\",\"ToKey\":\"TransactionDate\",\"ToType\":\"timestamp\"},{\"Dropped\":false,\"FromPath\":[\"TransactionTime\"],\"FromType\":\"string\",\"ToKey\":\"TransactionTime\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"TransactionAmount (INR)\"],\"FromType\":\"string\",\"ToKey\":\"TransactionAmount (INR)\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"Age\"],\"FromType\":\"bigint\",\"ToKey\":\"Age\",\"ToType\":\"long\"}],\"Name\":\"Transaction Dimention\"}},\"node-1744123198576\":{\"S3CsvSource\":{\"AdditionalOptions\":{\"EnableSamplePath\":false,\"SamplePath\":\"s3://aws-bucket-source-database-csv/bank_transactions.csv\"},\"Escaper\":\"\",\"Exclusions\":[],\"Name\":\"Amazon S3\",\"OptimizePerformance\":false,\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"transactionid\",\"Type\":\"string\"},{\"Name\":\"customerid\",\"Type\":\"string\"},{\"Name\":\"customerdob\",\"Type\":\"string\"},{\"Name\":\"custgender\",\"Type\":\"string\"},{\"Name\":\"custlocation\",\"Type\":\"string\"},{\"Name\":\"custaccountbalance\",\"Type\":\"string\"},{\"Name\":\"transactiondate\",\"Type\":\"string\"},{\"Name\":\"transactiontime\",\"Type\":\"string\"},{\"Name\":\"transactionamount (inr)\",\"Type\":\"string\"}]}],\"Paths\":[\"s3://aws-bucket-source-database-csv/bank_transactions.csv\"],\"QuoteChar\":\"quote\",\"Recurse\":true,\"Separator\":\"comma\",\"WithHeader\":true}},\"node-1744298077240\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1744123229330\"],\"Name\":\"Select From Collection\"}},\"node-1744298001651\":{\"ApplyMapping\":{\"Inputs\":[\"node-1744298077240\"],\"Mapping\":[{\"Dropped\":true,\"FromPath\":[\"TransactionID\"],\"FromType\":\"string\",\"ToKey\":\"TransactionID\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"CustomerID\"],\"FromType\":\"string\",\"ToKey\":\"CustomerID\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"CustomerDOB\"],\"FromType\":\"timestamp\",\"ToKey\":\"CustomerDOB\",\"ToType\":\"timestamp\"},{\"Dropped\":false,\"FromPath\":[\"CustGender\"],\"FromType\":\"string\",\"ToKey\":\"CustGender\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"CustLocation\"],\"FromType\":\"string\",\"ToKey\":\"CustLocation\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"CustAccountBalance\"],\"FromType\":\"string\",\"ToKey\":\"CustAccountBalance\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"TransactionDate\"],\"FromType\":\"timestamp\",\"ToKey\":\"TransactionDate\",\"ToType\":\"timestamp\"},{\"Dropped\":true,\"FromPath\":[\"TransactionTime\"],\"FromType\":\"string\",\"ToKey\":\"TransactionTime\",\"ToType\":\"string\"},{\"Dropped\":true,\"FromPath\":[\"TransactionAmount (INR)\"],\"FromType\":\"string\",\"ToKey\":\"TransactionAmount (INR)\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"Age\"],\"FromType\":\"bigint\",\"ToKey\":\"Age\",\"ToType\":\"long\"}],\"Name\":\"Customer Dimention\"}}}",
  "sourceControlDetails" : {
    "provider" : "GITHUB",
    "repository" : "final-thesis-ETL",
    "branch" : "main",
    "folder" : "glue-scripts"
  }
}